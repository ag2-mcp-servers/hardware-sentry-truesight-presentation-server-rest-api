# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:46:58+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Path, Query

from models import (
    ActionResponse,
    ApplicationSummary,
    Basis,
    DeviceAgent,
    DeviceSummary,
    Direction,
    ErrorResponse,
    GlobalSummary,
    GroupConfiguration,
    GroupSummary,
    ReinitializeActionConfiguration,
    ResultPage,
    RollPeriod,
    ServiceSummary,
)

app = MCPProxy(
    contact={
        'name': 'Sentry on BMC Community',
        'url': 'https://community.bmc.com/s/group/0F93n000000PlUtCAK/sentry-software',
    },
    description='Hardware Sentry TrueSight Presentation Server REST API',
    license={
        'name': 'BMC Connector SDK License Agreement',
        'url': 'https://www.bmc.com/content/dam/bmc/corporate/Connector_SDK_License_Agreement.pdf',
    },
    title='Hardware Sentry TrueSight Presentation Server REST API',
    version='11.1.00',
    servers=[
        {'url': 'http://truesight.local'},
        {'description': 'On this TrueSight Server', 'url': '/tsws/10.0/api/'},
        {
            'description': 'TrueSight Presentation Server',
            'url': 'https://{hostname}:{port}/tsws/10.0/api/',
            'variables': {
                'hostname': {'default': 'localhost'},
                'port': {'default': '8043'},
            },
        },
    ],
)


@app.post(
    '/hardware/actions/{deviceId}/collect-now',
    description=""" You need to provide the <b>Device ID</b> and <b>Monitor Class</b> parameters to identify the device:<br>- Use the <b>/hardware/devices</b> service in the <b>Device</b> section to retrieve the <b>Device ID</b> of any device.<br>- Use the <b>/hardware/device-monitors/{deviceId}</b> service in the <b>Device</b> section to retrieve the <b>Monitor Class</b> of a device. """,
    tags=['monitoring_operations_management'],
)
def collect_now(
    device_id: int = Path(..., alias='deviceId'),
    monitor_class: str = Query(..., alias='monitorClass'),
):
    """
    Triggers a new collect on a specific device.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/hardware/actions/{deviceId}/rediscover',
    description=""" You need to provide the <b>Device ID</b> to identify the device:<br>- Use the <b>/hardware/devices</b> service in the <b>Device</b> section to retrieve the <b>Device ID</b> of a device. """,
    tags=['monitoring_operations_management', 'device_information_management'],
)
def rediscover(device_id: int = Path(..., alias='deviceId')):
    """
    Triggers a new discovery on a specific device.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/hardware/actions/{deviceId}/reinitialize',
    description=""" Launches a 'Reinitialize KM' command for the following parameters:<br>- resetDiscoveryAndPollingIntervals<br>- resetAlertAfterNTimes<br>- resetAlertActions<br>- resetOtherA<br>- resetSettings<br>- resetDebugMode<br>- resetRemovedPausedObjectList<br>- resetReportSettings<br>- resetJavaSettings<br>- resetThresholds<br><br>You need to provide the <b>Device ID</b> to identify the device:<br>- Use the <b>/hardware/devices</b> service in the <b>Device</b> section to retrieve the <b>Device ID</b> of a device. """,
    tags=['monitoring_operations_management', 'device_information_management'],
)
def reinitialize(
    device_id: int = Path(..., alias='deviceId'),
    body: ReinitializeActionConfiguration = ...,
):
    """
    Sends a 'Reinitialize KM' command.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/hardware/actions/{deviceId}/remove',
    description=""" You need to provide the <b>Device ID</b>, the <b>Monitor Class</b> and the <b>Monitor SID</b> parameters:<br>- Use the <b>/hardware/devices</b> service in the <b>Device</b> section to retrieve the <b>Device ID</b> of any device.<br>- Use the <b>/hardware/device-monitors/{deviceId}</b> service in the <b>Device</b> section to retrieve the <b>Monitor Class</b> and the <b>Monitor SID</b> for a device.<br><br>(Example:"path":"/MS_HW_MAIN/10025150" where <em>MS_HW_MAIN</em> is the Monitor Class and <em>10025150</em> is the Monitor SID). """,
    tags=['monitoring_operations_management'],
)
def remove(
    device_id: int = Path(..., alias='deviceId'),
    monitor_class: str = Query(..., alias='monitorClass'),
    monitor_sid: str = Query(..., alias='monitorSid'),
):
    """
    Removes a specific instance from the monitoring environment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/hardware/actions/{deviceId}/reset-error-count',
    description=""" Sets the Error Count parameter to 0.<br><br>You need to provide the <b>Device ID</b>, the <b>Monitor Class</b> and the <b>Monitor SID</b> parameters:<br>- Use the <b>/hardware/devices</b> service in the <b>Device</b> section to retrieve the <b>Device ID</b> of any device.<br>- Use the <b>/hardware/device-monitors/{deviceId}</b> service in the <b>Device</b> section to retrieve the <b>Monitor Class</b> and the <b>Monitor SID</b> for a device.<br><br>(Example:"path":"/MS_HW_MAIN/10025150" where <em>MS_HW_MAIN</em> is the Monitor Class and <em>10025150</em> is the monitorSid). """,
    tags=['monitoring_operations_management'],
)
def reset(
    device_id: int = Path(..., alias='deviceId'),
    monitor_class: str = Query(..., alias='monitorClass'),
    monitor_sid: str = Query(..., alias='monitorSid'),
):
    """
    Resets the Error Count parameter.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/applications',
    description=""" Lists all the available ApplicationSummary instances. """,
    tags=['application_operations', 'monitoring_operations_management'],
)
def get_applications(
    page: Optional[str] = '0',
    limit: Optional[int] = 100,
    direction: Optional[Direction] = 'asc',
    sort: Optional[str] = 'name',
):
    """
    Gets summarized information about all monitored applications.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/applications/{applicationId}',
    description=""" You need to provide an <b>Application ID</b>:<br>- use the <b>hardware/applications</b> service to retrieve all available application IDs. """,
    tags=['application_operations'],
)
def get_one_application(application_id: str = Path(..., alias='applicationId')):
    """
    Gets detailed information for a specific application.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/device-monitors/{deviceId}',
    description=""" You need to provide a <b>Device ID</b>:<br>- use the <b>hardware/devices</b> service to get all available device IDs. """,
    tags=['device_information_management', 'monitoring_operations_management'],
)
def get_device_monitors(device_id: int = Path(..., alias='deviceId')):
    """
    Gets the Monitors for a specific device.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/devices',
    description=""" Lists the available DeviceSummary instances.<br><br>If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:<br>- use the <b>hardware/groups</b> service in the <b>Groups</b> section to get all available group IDs.<br>- use the <b>hardware/applications</b> service in the <b>Applications</b> section to get all available application IDs.<br>- use the <b>hardware/services</b> service in the <b>Services</b> section to get all available service IDs.<br><br><b>Note</b>: At most, one parent ID is taken into account according to this order of precedence:<ol><li>group ID</li><li>application ID</li><li>service ID</li></ol> """,
    tags=[
        'device_information_management',
        'application_operations',
        'group_info_management',
        'monitoring_operations_management',
    ],
)
def get_devices(
    page: Optional[str] = '0',
    limit: Optional[int] = 100,
    direction: Optional[Direction] = 'asc',
    sort: Optional[str] = 'name',
    group_id: Optional[str] = Query(None, alias='groupId'),
    application_id: Optional[str] = Query(None, alias='applicationId'),
    service_id: Optional[str] = Query(None, alias='serviceId'),
):
    """
    Gets summarized information about all monitored devices.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/devices-summary',
    description=""" Lists the GlobalSummary instance for all the monitored devices. """,
    tags=['device_information_management', 'device_query'],
)
def get_devices_summary():
    """
    Gets overall information for all devices.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/devices/{deviceId}',
    description=""" You need to provide a <b>Device ID</b>:<br>-use the <b>hardware/devices</b> service to get all available device IDs. """,
    tags=['device_information_management'],
)
def get_device(device_id: int = Path(..., alias='deviceId')):
    """
    Gets detailed information about a specific device.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/devices/{deviceId}/agent',
    description=""" You need to provide a <b>Device ID</b> to retrieve detailed information about the Agent that Monitors the device:<br>-use the <b>hardware/devices</b> service to get all available device IDs. """,
    tags=['device_information_management', 'device_query'],
)
def get_device_agent(device_id: int = Path(..., alias='deviceId')):
    """
    Gets detailed information about an Agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/devices/{deviceId}/agent-devices',
    description=""" You need to provide the <b>Device ID</b> of a device to retrieve any other devices monitored by the same Agent:<br>-use the <b>hardware/devices</b> service to get all available device IDs. """,
    tags=[
        'device_information_management',
        'monitoring_operations_management',
        'device_query',
    ],
)
def get_agent_devices(device_id: int = Path(..., alias='deviceId')):
    """
    Gets a list of all the devices monitored by an Agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/devices/{deviceId}/parameter-history',
    description=""" You need to provide the <b>Device ID</b>, <b>Parameter Name</b>, <b>Monitor Type</b> and <b>Monitor SID</b>:<br>- use the <b>hardware/devices</b> service to get all available device IDs<br>- use the <b>/hardware/device-monitors/{deviceId}</b> to get the parameter name, the Monitor type and the Monitor SID.<br><br>Finally, define the period for which you wish to retrieve data history. """,
    tags=['historical_data_access', 'device_information_management'],
)
def get_device_parameter_history(
    device_id: int = Path(..., alias='deviceId'),
    parameter_name: str = Query(..., alias='parameterName'),
    monitor_type: str = Query(..., alias='monitorType'),
    from_: Optional[int] = Query(None, alias='from'),
    to: Optional[int] = None,
    monitor_sid: Optional[str] = Query(None, alias='monitorSid'),
):
    """
    Gets data history for a parameter of a specific device over a given period.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/energy-usage/{deviceId}',
    description=""" You need to provide the device ID:<br>- use the <b>hardware/devices</b> service to get all available device IDs. """,
    tags=['energy_usage_tracking', 'historical_data_access'],
)
def get_device_energy_usage(
    device_id: int = Path(..., alias='deviceId'),
    roll_period: Optional[RollPeriod] = Query('ONE_DAY', alias='rollPeriod'),
    basis: Optional[Basis] = 'HOURLY',
):
    """
    Gets the energy usage for a specific device and a given period.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/groups',
    description=""" Lists the available GroupSummary instances. """,
    tags=['group_info_management', 'application_operations'],
)
def get_groups(
    page: Optional[str] = '0',
    limit: Optional[int] = 100,
    direction: Optional[Direction] = 'asc',
    sort: Optional[str] = 'name',
):
    """
    Gets all group summaries.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/groups/{groupId}',
    description=""" You need to provide a <b>Device ID</b>:<br>- use the <b>hardware/groups</b> service to get all available group ID. """,
    tags=['group_info_management', 'device_information_management'],
)
def get_one_group(group_id: str = Path(..., alias='groupId')):
    """
    Gets detailed information about a specific group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/hardware/groups/{groupId}',
    description=""" You need to provide a <b>Device ID</b>:<br>- use the <b>hardware/groups</b> service to get all available group ID.<br><br>If the ID is <em>"global"</em>, then the group being updated is the GlobalSummary. """,
    tags=['group_info_management', 'energy_usage_tracking'],
)
def update_energy_cost(
    group_id: str = Path(..., alias='groupId'), body: GroupConfiguration = None
):
    """
    Updates the values of the energy footprint parameter for a specific group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/heating-margin-devices',
    description=""" If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:<br>- use the <b>hardware/groups</b> service in the <b>Groups</b> section to get all available group IDs.<br>- use the <b>hardware/applications</b> service in the <b>Applications</b> section to get all available application IDs.<br>- use the <b>hardware/services</b> service in the <b>Services</b> section to get all available service IDs.<br><br><b>Note</b>: At most, one parent ID is taken into account according to this order of precedence:<ol><li>group ID</li><li>application ID</li><li>service ID</li></ol> """,
    tags=[
        'device_information_management',
        'monitoring_operations_management',
        'energy_usage_tracking',
    ],
)
def get_heating_margin_coverage(
    covered: Optional[bool] = True,
    page: Optional[str] = '0',
    limit: Optional[int] = 100,
    direction: Optional[Direction] = 'asc',
    sort: Optional[str] = 'name',
    group_id: Optional[str] = Query(None, alias='groupId'),
    application_id: Optional[str] = Query(None, alias='applicationId'),
    service_id: Optional[str] = Query(None, alias='serviceId'),
):
    """
    Gets the heating margin values for each monitored device, when available.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/history',
    description=""" Gets the historical data for a specific group, application or service, for a given period.<br><br>If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:<br>- use the <b>hardware/groups</b> service in the <b>Groups</b> section to get all available group IDs.<br>- use the <b>hardware/applications</b> service in the <b>Applications</b> section to get all available application IDs.<br>- use the <b>hardware/services</b> service in the <b>Services</b> section to get all available service IDs.<br><br><b>Note</b>: At most, one parent ID is taken into account according to this order of precedence:<ol><li>group ID</li><li>application ID</li><li>service ID</li></ol> """,
    tags=['historical_data_access', 'application_operations', 'group_info_management'],
)
def get_history(
    group_id: Optional[str] = Query(None, alias='groupId'),
    application_id: Optional[str] = Query(None, alias='applicationId'),
    service_id: Optional[str] = Query(None, alias='serviceId'),
    from_: Optional[int] = Query(None, alias='from'),
    to: Optional[int] = None,
):
    """
    Gets historical data for a specific group, application or service.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/search-devices',
    description=""" Gets the DeviceSummary instances whose name, model, manufacturer or serial number match the specified criteria.<br><br>If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:<br>- use the <b>hardware/groups</b> service in the <b>Groups</b> section to get all available group IDs.<br>- use the <b>hardware/applications</b> service in the <b>Applications</b> section to get all available application IDs.<br>- use the <b>hardware/services</b> service in the <b>Services</b> section to get all available service IDs.<br><br><b>Note</b>: At most, one parent ID is taken into account according to this order of precedence:<ol><li>group ID</li><li>application ID</li><li>service ID</li></ol> """,
    tags=['device_information_management', 'device_query'],
)
def search_devices(
    search_terms: str = Query(..., alias='searchTerms'),
    group_id: Optional[str] = Query(None, alias='groupId'),
    application_id: Optional[str] = Query(None, alias='applicationId'),
    service_id: Optional[str] = Query(None, alias='serviceId'),
    page: Optional[str] = '0',
    limit: Optional[int] = 100,
):
    """
    Searches devices by name, model, manufacturer or serial number.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/services',
    description=""" Lists the available ServiceSummary instances. """,
    tags=['service_info_management', 'monitoring_operations_management'],
)
def get_services(
    page: Optional[str] = '0',
    limit: Optional[int] = 100,
    direction: Optional[Direction] = 'asc',
    sort: Optional[str] = 'name',
):
    """
    Gets summarized information about all monitored services.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hardware/services/{serviceId}',
    description=""" You need to provide a <b>Service ID</b> ID :<br>- use the <b>hardware/services</b> service to get all available service IDs. """,
    tags=['service_info_management'],
)
def get_one_service(service_id: str = Path(..., alias='serviceId')):
    """
    Gets detailed information about a specific service.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
