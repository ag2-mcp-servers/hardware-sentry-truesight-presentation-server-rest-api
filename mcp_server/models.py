# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:46:58+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ActionResponse(BaseModel):
    pslOutput: Optional[str] = Field(
        None,
        description='The output of the underlying PSL operation.',
        examples=['!!!SUCCESS!!!'],
    )


class DeviceAgent(BaseModel):
    connectionStatus: Optional[str] = Field(
        None,
        description="The status of the PATROL Agent's connection.",
        examples=['Connection Active'],
    )
    id: Optional[str] = Field(
        None, description='The ID of the PATROL Agent.', examples=['9']
    )
    name: Optional[str] = Field(
        None, description='The FQDN of the PATROL Agent.', examples=['name.domain']
    )
    os: Optional[str] = Field(
        None,
        description='The operating system the PATROL Agent is running on.',
        examples=['Linux'],
    )
    port: Optional[str] = Field(
        None, description='The port the PATROL Agent is running on.', examples=['3181']
    )
    url: Optional[str] = Field(
        None,
        description="The link to the 'Monitors' tab of the PATROL Agent.",
        examples=['#/devices/42/2/monitorTab'],
    )
    version: Optional[str] = Field(
        None, description='The version of the PATROL Agent.', examples=['V11.3.02i']
    )


class Type(Enum):
    DEFAULT = 'DEFAULT'
    ESX_HOST = 'ESX_HOST'
    VIRTUAL_MACHINE = 'VIRTUAL_MACHINE'
    VIRTUAL_CENTER = 'VIRTUAL_CENTER'
    XEN_HOST = 'XEN_HOST'
    XEN_MASTER_SERVER = 'XEN_MASTER_SERVER'
    XEN_VIRTUAL_MACHINE = 'XEN_VIRTUAL_MACHINE'
    XENAPP_CONTROLLER = 'XENAPP_CONTROLLER'
    XENAPP_MACHINE = 'XENAPP_MACHINE'
    VBLOCK_ESX = 'VBLOCK_ESX'
    VBLOCK_VIRTUAL_MACHINE = 'VBLOCK_VIRTUAL_MACHINE'
    VBLOCK_SWITCH = 'VBLOCK_SWITCH'
    VBLOCK_STORAGE = 'VBLOCK_STORAGE'
    VBLOCK_CHASSIS = 'VBLOCK_CHASSIS'
    VBLOCK_BLADE = 'VBLOCK_BLADE'
    VBLOCK_ENV = 'VBLOCK_ENV'
    AIX_BOX = 'AIX_BOX'
    AIX_HARD_PARTITION = 'AIX_HARD_PARTITION'
    AIX_POOL = 'AIX_POOL'
    AIX_LPAR = 'AIX_LPAR'
    AIX_WPAR = 'AIX_WPAR'
    SOL_SYSTEM = 'SOL_SYSTEM'
    SOL_FRAME = 'SOL_FRAME'
    SOL_ZONE = 'SOL_ZONE'
    SOL_LDOM = 'SOL_LDOM'
    REDHAT_KVM_HOST = 'REDHAT_KVM_HOST'
    REDHAT_KVM_GUEST_INSTANCE = 'REDHAT_KVM_GUEST_INSTANCE'
    REDHAT_XEN_HOST = 'REDHAT_XEN_HOST'
    REDHAT_VM = 'REDHAT_VM'
    HP_SYSTEM = 'HP_SYSTEM'
    HP_NPAR = 'HP_NPAR'
    HP_VPAR = 'HP_VPAR'
    HP_INT_VM = 'HP_INT_VM'
    HP_INT_HOST = 'HP_INT_HOST'
    MS_HOST = 'MS_HOST'
    MS_VM = 'MS_VM'
    AZURE_VIRTUALMACHINE = 'AZURE_VIRTUALMACHINE'
    AMAZON_EC2 = 'AMAZON_EC2'
    OS400_HOST = 'OS400_HOST'
    DOCKER_HOST = 'DOCKER_HOST'
    DOCKER_NODE = 'DOCKER_NODE'
    DOCKER_CONTAINER = 'DOCKER_CONTAINER'
    ROUTER = 'ROUTER'
    HUB = 'HUB'
    PRINTER = 'PRINTER'
    REPEATER = 'REPEATER'
    WORKSTATION = 'WORKSTATION'
    NTSERVER = 'NTSERVER'
    PRINETSERVER = 'PRINETSERVER'
    RMONPROBE = 'RMONPROBE'
    WEBSERVER = 'WEBSERVER'
    DBSERVER = 'DBSERVER'
    MAILSERVER = 'MAILSERVER'
    FIREWALL = 'FIREWALL'
    OTHERS = 'OTHERS'
    APPSERVER = 'APPSERVER'
    DEDICATEDAGENT = 'DEDICATEDAGENT'
    REMOTEAGENT = 'REMOTEAGENT'
    LAYER_3_SWITCH = 'LAYER_3_SWITCH'
    CENTRAL_OFFICE_SWITCH = 'CENTRAL_OFFICE_SWITCH'
    ACCESS_SERVER = 'ACCESS_SERVER'
    I_O = 'I_O'
    WEB_CACHING = 'WEB_CACHING'
    MANAGEMENT = 'MANAGEMENT'
    BLOCK_SERVER = 'BLOCK_SERVER'
    FILE_SERVER = 'FILE_SERVER'
    MOBILE_USER_DEVICE = 'MOBILE_USER_DEVICE'
    BRIDGE_OR_EXTENDER = 'BRIDGE_OR_EXTENDER'
    GATEWAY = 'GATEWAY'
    LOADBALANCER = 'LOADBALANCER'
    MAINFRAME = 'MAINFRAME'
    SANSWITCH = 'SANSWITCH'
    SANHUB = 'SANHUB'
    SANBRIDGE = 'SANBRIDGE'
    SANROUTER = 'SANROUTER'
    SANDIRECTOR = 'SANDIRECTOR'
    RAIDSTORAGEDEVICE = 'RAIDSTORAGEDEVICE'
    VIRTUAL_TAPE_LIBRARY = 'VIRTUAL_TAPE_LIBRARY'
    JBOD = 'JBOD'
    STORAGESUBSYSTEM = 'STORAGESUBSYSTEM'
    STORAGE_VIRTUALIZER = 'STORAGE_VIRTUALIZER'
    MEDIA_LIBRARY = 'MEDIA_LIBRARY'
    EXTENDERNODE = 'EXTENDERNODE'
    NAS_HEAD = 'NAS_HEAD'
    SELFCONTAINED_NAS = 'SELFCONTAINED_NAS'
    UPS = 'UPS'
    IP_PHONE = 'IP_PHONE'
    MANAGEMENT_CONTROLLER = 'MANAGEMENT_CONTROLLER'
    CHASSIS_MANAGER = 'CHASSIS_MANAGER'
    HOSTBASED_RAID_CONTROLLER = 'HOSTBASED_RAID_CONTROLLER'
    STORAGE_DEVICE_ENCLOSURE = 'STORAGE_DEVICE_ENCLOSURE'
    DESKTOP = 'DESKTOP'
    LAPTOP = 'LAPTOP'
    VIRTUAL_LIBRARY_SYSTEM = 'VIRTUAL_LIBRARY_SYSTEM'
    BLADE_SYSTEM = 'BLADE_SYSTEM'
    BLADE_SERVER = 'BLADE_SERVER'
    VPN_CONCENTRATOR = 'VPN_CONCENTRATOR'
    PROXY_SERVER = 'PROXY_SERVER'
    LAYER_3_PROXY_SERVER = 'LAYER_3_PROXY_SERVER'
    WAN_ACCELERATOR = 'WAN_ACCELERATOR'
    SAN_PROCESSOR = 'SAN_PROCESSOR'
    VIRTUAL_SERVER_RHL = 'VIRTUAL_SERVER_RHL'
    VIRTUAL_SERVER_WINDOWS = 'VIRTUAL_SERVER_WINDOWS'
    ESXi = 'ESXi'
    VIRTUAL_SERVER = 'VIRTUAL_SERVER'
    HYPERVISOR = 'HYPERVISOR'
    AWS_AMI = 'AWS_AMI'
    MS_AZURE = 'MS_AZURE'
    UNKNOWN = 'UNKNOWN'


class DeviceSummary(BaseModel):
    agentId: Optional[int] = Field(
        None,
        description='The ID of the PATROL Agent the device is attached to.',
        examples=[42],
    )
    agentName: Optional[str] = Field(
        None,
        description='The name of the PATROL Agent the device is attached to.',
        examples=['name.domain'],
    )
    ambientTemperature: Optional[float] = Field(
        None, description='The ambient temperature of the device.'
    )
    collectTime: Optional[str] = Field(
        None,
        description='The collection time of the heating margin (as an Epoch time, in seconds).<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    deviceTSMOKey: Optional[str] = Field(
        None, description='The TSMOKey of the device.', examples=['2+501040 462']
    )
    deviceUrl: Optional[str] = Field(
        None,
        description='The link to the device details.',
        examples=['#/hardware-sentry/devices/42/details'],
    )
    heatingMargin: Optional[float] = Field(
        None,
        description='The heating margin of the device.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginUnit: Optional[str] = Field(
        None,
        description='The unit in which the heating margin of the device is being expressed.<br><u>Note</u>:This field will only be present if a value could be found.',
        examples=['Celsius degrees'],
    )
    id: Optional[int] = Field(None, description='The ID of the device.', examples=[42])
    name: Optional[str] = Field(None, description='The ID of the device.')
    powerConsumption: Optional[float] = Field(
        None, description='The power consumption of the device.'
    )
    powerConsumptionUnit: Optional[str] = Field(
        None,
        description='The unit in which the power consumption of the device is being expressed.',
    )
    productVersion: Optional[str] = Field(
        None,
        description="The Hardware Sentry KM version of the device's Monitor.<br><u>Note</u>:This field will only be present if a value could be found.",
    )
    serverId: Optional[int] = Field(
        None,
        description='The ID of the server the device is attached to.',
        examples=[42],
    )
    serverName: Optional[str] = Field(
        None,
        description='The name of the server the device is attached to.',
        examples=['name.domain'],
    )
    sid: Optional[str] = Field(
        None, description='The SID of the device.', examples=['cisco-c240-imc']
    )
    type: Optional[Type] = None
    updateTimestamp: Optional[int] = Field(
        None, description='The data collection time (as an Epoch time, in seconds).'
    )


class ErrorResponse(BaseModel):
    code: Optional[str] = Field(
        None, description="The error's business identifier.", examples=['GENERAL_ERROR']
    )
    date: Optional[datetime] = Field(None, description='The timestamp of the error.')
    message: Optional[str] = Field(
        None, description='The error message.', examples=['No data found']
    )


class GlobalSummary(BaseModel):
    co2Emission: Optional[float] = Field(
        None,
        description='The CO<sub>2</sub> emissions for all devices. This value can be updated by users with sufficient permissions.',
    )
    co2EmissionUnit: Optional[str] = Field(
        None,
        description='The unit in which the CO<sub>2</sub> emission is being expressed.',
    )
    editable: Optional[bool] = Field(
        None,
        description="If <em>true</em>, indicates that you do not have sufficient rights to update the global settings. However, you may still have sufficient rights to update a specific group's setting.",
    )
    energyCost: Optional[float] = Field(
        None,
        description='The electricity rate for all devices. This value can be updated by users with sufficient permissions.',
    )
    energyCostUnit: Optional[str] = Field(
        None, description='The unit in which the electricity rate is being expressed.'
    )
    groupNameFilter: Optional[str] = Field(
        None,
        description='Regular expression used to filter the groups for which the power consumption will be reported.',
        examples=['Group [0-9]+'],
    )
    heatingMargin: Optional[float] = Field(
        None,
        description='The lowest heating margin among the heating margins of all the devices.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginCoverage: Optional[float] = Field(
        None,
        description='The percentage of devices whose heating margin could be found.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginDeviceName: Optional[str] = Field(
        None,
        description='The name of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginDeviceUrl: Optional[str] = Field(
        None,
        description='The link to the details of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.',
        examples=['#/hardware-sentry/devices/3/details'],
    )
    heatingMarginUnit: Optional[str] = Field(
        None, description='The unit in which the heating margin is being expressed.'
    )
    id: Optional[str] = Field(
        None,
        description='The ID of the global summary (this ID will always be "global").',
    )
    totalPowerConsumption: Optional[float] = Field(
        None, description='The total power consumption of all the devices.'
    )
    totalPowerConsumptionUnit: Optional[str] = Field(
        None,
        description='The unit in which the total power consumption is being expressed.',
    )
    updateTimestamp: Optional[int] = Field(
        None, description='The data collection time (as an Epoch time, in seconds).'
    )


class GroupConfiguration(BaseModel):
    co2Emission: Optional[float] = Field(
        None,
        description='Updates the CO<sub>2</sub> emission (unit: kg/kWh).',
        examples=[0.3],
    )
    energyCost: Optional[float] = Field(
        None, description='Updates the electricity rate (unit: $/kWh).', examples=[0.3]
    )
    groupNameFilter: Optional[str] = Field(
        None,
        description='Updates the regular expression used to filter the groups for which the power consumption should be reported.',
        examples=['Group [0-9]+'],
    )


class GroupSummary(BaseModel):
    ambientTemperature: Optional[float] = Field(
        None,
        description='The average ambient temperature based on the ambient temperatures of the devices attached to the group.',
    )
    ambientTemperatureUnit: Optional[str] = Field(
        None,
        description='The unit in which the ambient temperature value is being expressed.',
    )
    co2Emission: Optional[float] = Field(
        None,
        description='The CO<sub>2</sub> emissions for all devices attached to the group. This value can be updated by users with sufficient permissions.',
    )
    co2EmissionUnit: Optional[str] = Field(
        None,
        description='The unit in which the user-defined CO<sub>2</sub> emission value is being expressed.',
    )
    costUnit: Optional[str] = Field(
        None,
        description='The currency in which all energy cost values are being expressed.',
    )
    deviceSummaries: Optional[List[DeviceSummary]] = None
    editable: Optional[bool] = Field(
        None,
        description='The name of the key used to identify the group in the history table.',
    )
    emittedCo2Unit: Optional[str] = Field(
        None,
        description='The unit in which all emitted CO<sub>2</sub> quantities are being expressed.',
    )
    energyConsumptionUnit: Optional[str] = Field(
        None,
        description='The unit in which all energy consumption values are being expressed.',
    )
    energyCost: Optional[float] = Field(
        None,
        description='The electricity rate for all devices attached to the group. This value can be updated by users with sufficient permissions.',
    )
    energyCostUnit: Optional[str] = Field(
        None,
        description='The unit in which th euser-defined electricity rate value is being expressed.',
    )
    heatingMargin: Optional[float] = Field(
        None,
        description='The lowest heating margin among the heating margins of the devices attached to the group.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginCoverage: Optional[float] = Field(
        None,
        description='The percentage of devices attached to the group, whose heating margin could be found.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginDeviceName: Optional[str] = Field(
        None,
        description='The name of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginDeviceUrl: Optional[str] = Field(
        None,
        description='The link to the details of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginUnit: Optional[str] = Field(
        None,
        description='The unit in which the heating margin of the group is being expressed.',
    )
    historyParentIdKey: Optional[str] = None
    id: Optional[str] = Field(None, description='The ID of the group.', examples=['42'])
    name: Optional[str] = Field(None, description='The name of the group.')
    numberOfDevices: Optional[int] = Field(
        None, description='The number of devices attached to the group.'
    )
    oneDayConfidence: Optional[float] = Field(
        None,
        description='The confidence score (percentage) for the daily energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.',
    )
    oneDayCost: Optional[float] = Field(
        None,
        description='The daily cost of the energy consumed by the devices attached to the group.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneDayEmittedCo2: Optional[float] = Field(
        None,
        description='The quantity of CO<sub>2</sub> emitted by the devices attached to the group during one day.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneDayEnergyConsumption: Optional[float] = Field(
        None,
        description='The quantity of energy consumed by the devices attached to the group during one day.',
    )
    oneMonthConfidence: Optional[float] = Field(
        None,
        description='The confidence score (percentage) for the monthly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.',
    )
    oneMonthCost: Optional[float] = Field(
        None,
        description='The monthly cost of the energy consumed by the devices attached to the group.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneMonthEmittedCo2: Optional[float] = Field(
        None,
        description='The quantity of CO<sub>2</sub> emitted by the devices attached to the group during one month.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneMonthEnergyConsumption: Optional[float] = Field(
        None,
        description='The quantity of energy consumed by the devices attached to the group during one month.',
    )
    oneYearConfidence: Optional[float] = Field(
        None,
        description='The confidence score (percentage) for the yearly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.',
    )
    oneYearCost: Optional[float] = Field(
        None,
        description='The yearly cost of the energy consumed by the devices attached to the group.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneYearEmittedCo2: Optional[float] = Field(
        None,
        description='The quantity of CO<sub>2</sub> emitted by the devices attached to the group in one year.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneYearEnergyConsumption: Optional[float] = Field(
        None,
        description='The quantity of energy consumed by the devices attached to the group during one year.',
    )
    serverId: Optional[int] = Field(
        None,
        description='The ID of the server the group is attached to.',
        examples=[42],
    )
    totalPowerConsumption: Optional[float] = Field(
        None,
        description='The total power consumption of the devices attached to the group.',
    )
    totalPowerConsumptionUnit: Optional[str] = Field(
        None,
        description='The unit in which the total power consumption of the devices attached to the group is being expressed.',
    )
    updateTimestamp: Optional[int] = Field(
        None, description='The data collection time (as an Epoch time, in seconds).'
    )
    url: Optional[str] = Field(
        None,
        description='The link to the group details.',
        examples=['#/green-it/groups/13/details'],
    )


class ResetAlertActions(Enum):
    integer_0 = 0
    integer_1 = 1


class ResetAlertAfterNTimes(Enum):
    integer_0 = 0
    integer_1 = 1


class ResetDebugMode(Enum):
    integer_0 = 0
    integer_1 = 1


class ResetDiscoveryAndPollingIntervals(Enum):
    integer_0 = 0
    integer_1 = 1


class ResetJavaSettings(Enum):
    integer_0 = 0
    integer_1 = 1


class ResetOtherAlertSettings(Enum):
    integer_0 = 0
    integer_1 = 1


class ResetRemovedPausedObjectList(Enum):
    integer_0 = 0
    integer_1 = 1


class ResetReportSettings(Enum):
    integer_0 = 0
    integer_1 = 1


class ResetThresholds(Enum):
    integer_0 = 0
    integer_1 = 1


class ReinitializeActionConfiguration(BaseModel):
    resetAlertActions: Optional[ResetAlertActions] = Field(
        None,
        description='When set to <em>1</em>, removes all manually set Alert Actions and reverts to basic default actions i.e. trigger a PATROL event and annotate a parameter graph.',
        examples=[1],
    )
    resetAlertAfterNTimes: Optional[ResetAlertAfterNTimes] = Field(
        None,
        description='When set to <em>1</em>, resets the number of times thresholds can be breached before triggering an alert to their default values (1 time) for numeric, discrete, connector status and present parameters.',
        examples=[1],
    )
    resetDebugMode: Optional[ResetDebugMode] = Field(
        None,
        description='When set to <em>1</em>, deactivates the debug mode when it was manually enabled.',
        examples=[1],
    )
    resetDiscoveryAndPollingIntervals: Optional[ResetDiscoveryAndPollingIntervals] = (
        Field(
            None,
            description='When set to <em>1</em>, removes all user-defined frequencies for discovery and polling processes to their default values (respectively 1 hour and 2 minutes).',
            examples=[1],
        )
    )
    resetJavaSettings: Optional[ResetJavaSettings] = Field(
        None,
        description='When set to <em>1</em>, removes the custom Java settings (path and credentials). The KM will try to automatically find a suitable JRE.',
        examples=[1],
    )
    resetOtherAlertSettings: Optional[ResetOtherAlertSettings] = Field(
        None,
        description='When set to <em>1</em>, reverts any manually performed configuration changes to the default Hardware Sentry values.',
        examples=[1],
    )
    resetRemovedPausedObjectList: Optional[ResetRemovedPausedObjectList] = Field(
        None,
        description='When set to <em>1</em>, reactivates the monitoring of all paused or removed objects.',
        examples=[1],
    )
    resetReportSettings: Optional[ResetReportSettings] = Field(
        None,
        description='When set to <em>1</em>, clears the report schedule.',
        examples=[1],
    )
    resetThresholds: Optional[ResetThresholds] = Field(
        None, description='When set to <em>1</em>, resets all thresholds.', examples=[1]
    )


class ResultPage(BaseModel):
    items: Optional[List[Dict[str, Any]]] = Field(
        None, description='The list of currently accessible results.'
    )
    restrictedRights: Optional[bool] = Field(
        None,
        description='If <em>true</em>, indicates that you are denied access to part of, or all the results.',
        examples=[False],
    )
    total: Optional[int] = Field(
        None,
        description='The total number of accessible results, including the results not listed in <em>items</em>.',
    )


class ServiceSummary(BaseModel):
    costUnit: Optional[str] = Field(
        None,
        description='The currency in which all energy cost values are being expressed.',
    )
    deviceSummaries: Optional[List[DeviceSummary]] = Field(
        None,
        description='The list of devices attached to the service.<br><u>Note</u>: when using the <b>Services</b> service, this list is always empty. It is populated only when using the <b>Service Details</b> service.',
    )
    emittedCo2Unit: Optional[str] = Field(
        None,
        description='The unit in which all CO<sub>2</sub> emission values are being expressed.',
    )
    energyConsumptionUnit: Optional[str] = Field(
        None,
        description='The unit in which all energy consumption values are being expressed.',
    )
    heatingMargin: Optional[float] = Field(
        None,
        description='The lowest heating margin among the heating margins of the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginCoverage: Optional[float] = Field(
        None,
        description='The percentage of devices attached to the service, whose heating margin could be found.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginDeviceName: Optional[str] = Field(
        None,
        description='The name of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginDeviceUrl: Optional[str] = Field(
        None,
        description='The link to the details of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginUnit: Optional[str] = Field(
        None,
        description='The unit in which the heating margin of the service is being expressed.',
    )
    historyParentIdKey: Optional[str] = Field(
        None,
        description='The name of the key used to identify the service in the history table.',
    )
    id: Optional[str] = Field(
        None,
        description='The ID of the service.',
        examples=['2+mc.pncell_dev-tsim.internal.sentrysoftware.net.1f485a2f.0'],
    )
    name: Optional[str] = Field(None, description='The name of the service.')
    numberOfDevices: Optional[int] = Field(
        None, description='The number of devices attached to the service.'
    )
    oneDayConfidence: Optional[float] = Field(
        None,
        description='The confidence score (percentage) for the daily energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.',
    )
    oneDayCost: Optional[float] = Field(
        None,
        description='The daily cost of the energy consumed by the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneDayEmittedCo2: Optional[float] = Field(
        None,
        description='The quantity of CO<sub>2</sub> emitted by the devices attached to the service during one day.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneDayEnergyConsumption: Optional[float] = Field(
        None,
        description='The quantity of energy consumed by the devices attached to the service during one day.',
    )
    oneMonthConfidence: Optional[float] = Field(
        None,
        description='The confidence score (percentage) for the monthly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.',
    )
    oneMonthCost: Optional[float] = Field(
        None,
        description='The monthly cost of the energy consumed by the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneMonthEmittedCo2: Optional[float] = Field(
        None,
        description='The quantity of CO<sub>2</sub> emitted by the devices attached to the service during one month.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneMonthEnergyConsumption: Optional[float] = Field(
        None,
        description='The quantity of energy consumed by the devices attached to the service during one month.',
    )
    oneYearConfidence: Optional[float] = Field(
        None,
        description='The confidence score (percentage) for the yearly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.',
    )
    oneYearCost: Optional[float] = Field(
        None,
        description='The yearly cost of the energy consumed by the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneYearEmittedCo2: Optional[float] = Field(
        None,
        description='The quantity of CO<sub>2</sub> emitted by the devices attached to the service in one year.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneYearEnergyConsumption: Optional[float] = Field(
        None,
        description='The quantity of energy consumed by the devices attached to the service during one year.',
    )
    providerId: Optional[str] = Field(
        None, description='The ID of the server providing the service.', examples=['42']
    )
    totalPowerConsumption: Optional[float] = Field(
        None,
        description='The total power consumption of the devices attached to the service.',
    )
    totalPowerConsumptionUnit: Optional[str] = Field(
        None,
        description='The unit in which the total power consumption of the devices attached to the service is being expressed.',
    )
    updateTimestamp: Optional[int] = Field(
        None, description='The data collection time (as an Epoch time, in seconds).'
    )
    url: Optional[str] = Field(
        None,
        description='The link to the service details.',
        examples=[
            '#/green-it/services/2+mc.pncell_dev-tsim.internal.sentrysoftware.net.1f485a2f.0/details'
        ],
    )


class Direction(Enum):
    asc = 'asc'
    desc = 'desc'


class RollPeriod(Enum):
    ONE_DAY = 'ONE_DAY'
    ONE_WEEK = 'ONE_WEEK'
    ONE_MONTH = 'ONE_MONTH'
    SIX_MONTHS = 'SIX_MONTHS'
    ONE_YEAR = 'ONE_YEAR'


class Basis(Enum):
    MONTHLY = 'MONTHLY'
    DAILY = 'DAILY'
    HOURLY = 'HOURLY'


class ApplicationSummary(BaseModel):
    costUnit: Optional[str] = Field(
        None,
        description='The currency in which all energy cost values are being expressed.',
    )
    deviceSummaries: Optional[List[DeviceSummary]] = Field(
        None,
        description='The list of devices attached to the application.<br><u>Note</u>: when using the <b>Applications</b> service, this list is always empty. It is populated only when using the <b>Application Details</b> service.',
    )
    emittedCo2Unit: Optional[str] = Field(
        None,
        description='The unit in which all CO<sub>2</sub> emission values are being expressed.',
    )
    energyConsumptionUnit: Optional[str] = Field(
        None,
        description='The unit in which all energy consumption values are being expressed.',
    )
    heatingMargin: Optional[float] = Field(
        None,
        description='The lowest heating margin among the heating margins of the devices attached to the application.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginCoverage: Optional[float] = Field(
        None,
        description='The percentage of devices attached to the application, whose heating margin could be found.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginDeviceName: Optional[str] = Field(
        None,
        description='The name of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginDeviceUrl: Optional[str] = Field(
        None,
        description='The link to the details of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.',
    )
    heatingMarginUnit: Optional[str] = Field(
        None,
        description='The unit in which the heating margin of the application is being expressed.',
    )
    historyParentIdKey: Optional[str] = Field(
        None,
        description='The name of the key used to identify the application in the history table.',
    )
    id: Optional[str] = Field(
        None, description='The ID of the application.', examples=['42']
    )
    name: Optional[str] = Field(None, description='The name of the application.')
    numberOfDevices: Optional[int] = Field(
        None, description='The number of devices attached to the application.'
    )
    oneDayConfidence: Optional[float] = Field(
        None,
        description='The confidence score (percentage) for the daily energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.',
    )
    oneDayCost: Optional[float] = Field(
        None,
        description='The daily cost of the energy consumed by the devices attached to the application.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneDayEmittedCo2: Optional[float] = Field(
        None,
        description='The quantity of CO<sub>2</sub> emitted by the devices attached to the application during one day.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneDayEnergyConsumption: Optional[float] = Field(
        None,
        description='The quantity of energy consumed by the devices attached to the application during one day.',
    )
    oneMonthConfidence: Optional[float] = Field(
        None,
        description='The confidence score (percentage) for the monthly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.',
    )
    oneMonthCost: Optional[float] = Field(
        None,
        description='The monthly cost of the energy consumed by the devices attached to the application.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneMonthEmittedCo2: Optional[float] = Field(
        None,
        description='The quantity of CO<sub>2</sub> emitted by the devices attached to the application during one month.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneMonthEnergyConsumption: Optional[float] = Field(
        None,
        description='The quantity of energy consumed by the devices attached to the application during one month.',
    )
    oneYearConfidence: Optional[float] = Field(
        None,
        description='The confidence score (percentage) for the yearly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.',
    )
    oneYearCost: Optional[float] = Field(
        None,
        description='The yearly cost of the energy consumed by the devices attached to the application.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneYearEmittedCo2: Optional[float] = Field(
        None,
        description='The quantity of CO<sub>2</sub> emitted by the devices attached to the application in one year.<br><u>Note</u>:This field will only be present if a value could be computed.',
    )
    oneYearEnergyConsumption: Optional[float] = Field(
        None,
        description='The quantity of energy consumed by the devices attached to the application during one year.',
    )
    totalPowerConsumption: Optional[float] = Field(
        None,
        description='The total power consumption of the devices attached to the application.',
    )
    totalPowerConsumptionUnit: Optional[str] = Field(
        None,
        description='The unit in which the total power consumption of the devices attached to the application is being expressed.',
    )
    updateTimestamp: Optional[int] = Field(
        None, description='The data collection time (as an Epoch time, in seconds).'
    )
    url: Optional[str] = Field(
        None,
        description='The link to the application details.',
        examples=['#/green-it/applications/349676/details'],
    )
